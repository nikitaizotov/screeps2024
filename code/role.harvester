const creepService = require('creep.service');

var roleHarvester = {
    creepsPerRoom: 3,
	namePrefix: 'Harvester',
	memoryKey: 'harvester',
	bodyParts: [WORK,CARRY,MOVE],
    run: function(creep) {
        if (creep.spawning) {
            return;
        }
        if((creep.memory.transfering || creep.memory.transfering === undefined) && creep.store[RESOURCE_ENERGY] == 0) {
            creep.memory.transfering = false;
            creep.memory.path = null;
            creep.say('ðŸ”„ harvest');
	    }
	    if(!creep.memory.transfering && creep.store.getFreeCapacity() == 0) {
	        creep.memory.transfering = true;
	        creep.memory.path = null;
	        creep.say('âš¡ transfer');
	    }
	    
	    if(creep.memory.transfering) {
	        this.transferEnergy(creep);
	    } else {
            this.harvestEnergy(creep);
	    }
	},
	transferEnergy: function(creep) {
        if(!creep.memory.path) {
            creep.say('Searching')
            const targets = creep.room.find(FIND_STRUCTURES, {
                filter: (structure) => {
                    return (structure.structureType === STRUCTURE_EXTENSION ||
                            structure.structureType === STRUCTURE_SPAWN ||
                            structure.structureType === STRUCTURE_TOWER) &&
                            structure.store.getFreeCapacity(RESOURCE_ENERGY) > 0;
                }
            });
        
            if (targets.length > 0) {
                var closestTarget = creep.pos.findClosestByPath(targets);
                if (closestTarget) {
                    creep.memory.path = creep.pos.findPathTo(closestTarget);
                    creep.memory.targetId = closestTarget.id;
                }
            } else {
                console.log('No targets needing energy found.');
            }
        } else {
            this.moveAndTransfer(creep);
        }
	},
	harvestEnergy: function(creep) {
	    if(!creep.memory.path) {
	        creepService.getPathToSource(creep);
	    } else {
	        creepService.moveAndHarvest(creep);
	    }
	},
	moveAndTransfer: function(creep) {
	    creepService.drawPath(creep);
	    const target = Game.getObjectById(creep.memory.targetId);
        const action = creep.transfer(target, RESOURCE_ENERGY);
        
        if (action === ERR_NOT_IN_RANGE) {
            const moveResult = creep.moveByPath(creep.memory.path);
            if (moveResult !== OK && moveResult !== ERR_TIRED) {
                console.log("Move by path failed, error:", moveResult);
            }
        }
    }
};

module.exports = roleHarvester;